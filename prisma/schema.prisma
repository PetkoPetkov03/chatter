// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @unique
  email String @unique
  username String @unique
  admin Boolean @default(false)
  friends String[] @default([])
  notifications Notification[]
  friendRequests String[] @default([])
  priviligesStatus Restrictions[]
  icon String @default("/images/base.png")
  reports Reports[]
  chatrooms String[]
  password String
  posts Posts[]
  comments Comments[]
  replies Replies[]
}

model Notification {
  id String @id @default(cuid())
  userId String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  contend String
  seen Boolean @default(false)
}

model Reports {
  id String @id @default(cuid())
  userId String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportType String
  submiterId String
  message String
  date DateTime @default(now())
}

model Restrictions {
  id String @id @default(cuid())
  userId String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  restrictions String @default("Ban")
  reason String
  duration DateTime @default(now())
}

model Chatrooms {
  id String @id @default(cuid())
  adminId String
  name String @unique
  messages Messages[]
  participants String[]
  date DateTime @default(now())
}

model Messages {
  id String @id @default(cuid())
  messageId String @default(cuid())
  chatroom Chatrooms @relation(fields: [messageId], references: [id], onDelete: Cascade)
  senderId String
  senderName String
  content String
  date DateTime @default(now())
}

model Posts {
  id String @id @default(cuid())
  title String
  description String
  image String[]
  date DateTime @default(now())
  author User @relation(fields: [id], references: [id], onDelete: Cascade)
  comments Comments[]
}

model Comments {
  id String @id @default(cuid())
  post Posts @relation(fields: [id], references: [id], onDelete: Cascade)
  author User @relation(fields: [id], references: [id], map: "author", onDelete: Cascade)
  content String
  replies Replies[]
  likes BigInt @default(0)
  dislikes BigInt @default(0)
  date DateTime @default(now())
}

model Replies {
  id String @id @default(cuid())
  author User @relation(fields: [id], references: [id])
  comment Comments @relation(fields: [id], references: [id], map: "comment")
  content String
  likes BigInt @default(0)
  dislike BigInt @default(0)
  date DateTime @default(now())
}